generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(cuid())
  name                 String
  email                String           @unique
  emailVerified        DateTime?
  password             String
  image                String?
  role                 Role             @default(USER)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  active               Boolean          @default(true)
  lastLogin            DateTime?
  passwordResetToken   String?          @db.VarChar(255)
  passwordResetExpires DateTime?
  passwordChangedAt    DateTime?
  accounts             Account[]
  attachments          Attachment[]
  auditLogs            AuditLog[]
  notes                Note[]
  registrations        Registration[]
  settingsChanges      SettingsChange[]
  statusChanges        StatusHistory[]
}

model Account {
  id                String @id @default(cuid())
  provider          String
  providerAccountId String
  userId            String
  user              User   @relation(fields: [userId], references: [id])
}

model Settings {
  id          String           @id @default(cuid())
  key         String           @unique
  value       String
  description String?
  category    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  changes     SettingsChange[]

  @@map("settings")
}

model SettingsChange {
  id            String   @id @default(cuid())
  settingId     String
  previousValue String?
  newValue      String
  userId        String
  changedAt     DateTime @default(now())
  setting       Settings @relation(fields: [settingId], references: [id])
  changedBy     User     @relation(fields: [userId], references: [id])

  @@map("settings_changes")
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  details     String?
  userId      String
  performedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  performedBy User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Registration {
  id                       String             @id @default(cuid())
  firstName                String?
  lastName                 String?
  gender                   Gender?
  maritalStatus            MaritalStatus?
  email                    String             @unique
  phoneNumber              String?
  currentLocation          String?
  profession               String?
  specialization           String?
  yearsOfExperience        String?
  jobTitle                 String?
  hasProfessionalLicense   Boolean?
  preferredLocations       String[]           @default([])
  willingToRelocate        Boolean?
  preferredJobTypes        String[]           @default([])
  expectedSalary           Float?
  noticePeriodValue        Int?
  noticePeriodUnit         String?
  references               Json?
  resume                   String?
  passportOrId             String?
  professionalCertificates String[]           @default([])
  policeClearance          String?
  confirmAccuracy          Boolean?
  termsAccepted            Boolean?
  backgroundCheckConsent   Boolean?
  status                   RegistrationStatus @default(DRAFT)
  notes                    String?
  submittedAt              DateTime?
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  userId                   String?
  licensingStatus          String?
  processingUrgency        ProcessingUrgency?
  visaType                 VisaType?
  documents                Attachment[]       @relation("RegistrationDocuments")
  user                     User?              @relation(fields: [userId], references: [id])

  @@map("registrations")
}

model PartnershipApplication {
  id            String          @id @default(cuid())
  fullName      String
  email         String
  company       String
  phone         String
  country       String
  expertise     String[]
  businessType  String
  message       String?
  status        Status          @default(NEW)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  attachments   Attachment[]
  notes         Note[]
  statusHistory StatusHistory[]

  @@map("partnership_applications")
}

model StatusHistory {
  id             String                 @id @default(cuid())
  applicationId  String
  previousStatus Status?
  newStatus      Status
  notes          String?
  userId         String
  changedAt      DateTime               @default(now())
  application    PartnershipApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  changedBy      User                   @relation(fields: [userId], references: [id])

  @@map("status_history")
}

model Note {
  id            String                 @id @default(cuid())
  applicationId String
  content       String
  userId        String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  application   PartnershipApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  createdBy     User                   @relation(fields: [userId], references: [id])

  @@map("notes")
}

model Attachment {
  id             String                  @id @default(cuid())
  applicationId  String?
  registrationId String?
  fileName       String
  fileType       String
  fileSize       Int
  description    String?
  fileUrl        String
  documentType   String?
  userId         String
  uploadedAt     DateTime                @default(now())
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  application    PartnershipApplication? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  registration   Registration?           @relation("RegistrationDocuments", fields: [registrationId], references: [id], onDelete: Cascade)
  uploadedBy     User                    @relation(fields: [userId], references: [id])

  @@map("attachments")
}

enum Role {
  USER
  REVIEWER
  ADMIN
  SUPER_ADMIN
}

enum Status {
  NEW
  UNDER_REVIEW
  APPROVED
  REJECTED
  ONBOARDING
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  OTHER
}

enum EducationStatus {
  IN_PROGRESS
  COMPLETED
  DROPPED_OUT
  ON_HOLD
}

enum EducationLevel {
  HIGH_SCHOOL
  ASSOCIATE
  BACHELORS
  MASTERS
  PHD
  OTHER
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  INTERNSHIP
  FREELANCE
  SELF_EMPLOYED
  UNEMPLOYED
  OTHER
}

enum VisaType {
  EMPLOYMENT
  PSV
  FAMILY
  VISIT
}

enum ProcessingUrgency {
  STANDARD
  URGENT
  EMERGENCY
}

enum RegistrationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  MORE_INFO_NEEDED
}
