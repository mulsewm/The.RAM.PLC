// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // If DATABASE_URL is not set, construct it from individual env vars
  // Example format: postgresql://postgres:postgres@localhost:5432/theRAMDB
}

// User model for admin dashboard users
model User {
  id                   String    @id @default(cuid())
  name                 String
  email                String    @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  role                 Role      @default(USER)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  active               Boolean   @default(true)
  lastLogin            DateTime?
  passwordResetToken   String?   @db.VarChar(255)
  passwordResetExpires DateTime?
  passwordChangedAt    DateTime?

  // Relations
  notes           Note[]
  statusChanges   StatusHistory[]
  attachments     Attachment[]
  auditLogs       AuditLog[]
  settingsChanges SettingsChange[]
  registrations   Registration[]

  @@map("users")
}

enum Role {
  USER // Basic user with limited permissions
  REVIEWER // Can review applications but not manage users
  ADMIN // Can manage users and applications
  SUPER_ADMIN // Has full system access
}

// Settings model for system-wide configuration
model Settings {
  id          String           @id @default(cuid())
  key         String           @unique
  value       String           @db.Text
  description String?
  category    String // e.g., "email", "system", "notification"
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  changes     SettingsChange[]

  @@map("settings")
}

// Settings change history for audit purposes
model SettingsChange {
  id            String   @id @default(cuid())
  setting       Settings @relation(fields: [settingId], references: [id])
  settingId     String
  previousValue String?  @db.Text
  newValue      String   @db.Text
  changedBy     User     @relation(fields: [userId], references: [id])
  userId        String
  changedAt     DateTime @default(now())

  @@map("settings_changes")
}

// Audit log for tracking important system actions
model AuditLog {
  id          String   @id @default(cuid())
  action      String // e.g., "user.create", "user.update", "settings.update"
  entityType  String // e.g., "User", "Settings", "PartnershipApplication"
  entityId    String
  details     String?  @db.Text
  performedBy User     @relation(fields: [userId], references: [id])
  userId      String
  performedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  ipAddress   String?
  userAgent   String?

  @@map("audit_logs")
}

// Multi-step registration model
model Registration {
  id String @id @default(cuid())

  // ── Step 1: Personal Information ──
  firstName     String?
  lastName      String?
  gender        Gender?
  maritalStatus MaritalStatus?

  // ── Contact Information (merged/removed) ──
  email           String  @unique
  phoneNumber     String?
  currentLocation String?

  // ── Professional Information ──
  profession        String?
  specialization    String?
  yearsOfExperience String?
  jobTitle          String?

  // ── Licensing & Certification (simplified) ──
  hasProfessionalLicense Boolean?
  licensingStatus        String? // e.g., "In Process", "Active", "Expired"

  // ── Work Preferences ──
  preferredLocations String[] @default([])
  willingToRelocate  Boolean?
  preferredJobTypes  String[] @default([])
  expectedSalary     Float?
  noticePeriodValue  Int?
  noticePeriodUnit   String? // 'days', 'weeks', 'months'

  // ── Visa Information ──
  visaType          VisaType?
  processingUrgency ProcessingUrgency?

  // ── Professional References ──
  references Json? // Array of reference objects

  // ── Document Uploads ──
  resume                   String? // File path
  passportOrId             String? // File path
  professionalCertificates String[] @default([]) // Array of file paths
  policeClearance          String? // File path

  // ── Terms & Declaration ──
  confirmAccuracy        Boolean?
  termsAccepted          Boolean?
  backgroundCheckConsent Boolean?

  // ── Status & metadata ──
  status      RegistrationStatus @default(DRAFT)
  notes       String?
  submittedAt DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // ── Relations ──
  user      User?        @relation(fields: [userId], references: [id])
  userId    String?
  documents Attachment[] @relation("RegistrationDocuments")

  @@map("registrations")
}

// Partnership application model
model PartnershipApplication {
  id           String   @id @default(cuid())
  fullName     String
  email        String
  company      String
  phone        String
  country      String
  expertise    String[] // Stored as an array of strings
  businessType String
  message      String?  @db.Text
  status       Status   @default(NEW)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  statusHistory StatusHistory[]
  notes         Note[]
  attachments   Attachment[]

  @@map("partnership_applications")
}

enum Status {
  NEW
  UNDER_REVIEW
  APPROVED
  REJECTED
  ONBOARDING
}

// Status history for tracking status changes
model StatusHistory {
  id             String                 @id @default(cuid())
  application    PartnershipApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId  String
  previousStatus Status?
  newStatus      Status
  notes          String?                @db.Text
  changedBy      User                   @relation(fields: [userId], references: [id])
  userId         String
  changedAt      DateTime               @default(now())

  @@map("status_history")
}

// Notes for partnership applications
model Note {
  id            String                 @id @default(cuid())
  application   PartnershipApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  content       String                 @db.Text
  createdBy     User                   @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt

  @@map("notes")
}

// Attachments for partnership applications and registrations
model Attachment {
  id             String                  @id @default(cuid())
  application    PartnershipApplication? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId  String?
  registration   Registration?           @relation("RegistrationDocuments", fields: [registrationId], references: [id], onDelete: Cascade)
  registrationId String?
  fileName       String
  fileType       String
  fileSize       Int
  description    String?
  fileUrl        String
  documentType   String? // e.g., 'PASSPORT', 'RESUME', 'OTHER'
  uploadedBy     User                    @relation(fields: [userId], references: [id])
  userId         String
  uploadedAt     DateTime                @default(now())
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  @@map("attachments")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  OTHER
}

enum EducationStatus {
  IN_PROGRESS
  COMPLETED
  DROPPED_OUT
  ON_HOLD
}

enum EducationLevel {
  HIGH_SCHOOL
  ASSOCIATE
  BACHELORS
  MASTERS
  PHD
  OTHER
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  INTERNSHIP
  FREELANCE
  SELF_EMPLOYED
  UNEMPLOYED
  OTHER
}

enum VisaType {
  EMPLOYMENT
  PSV
  FAMILY
  VISIT
}

enum ProcessingUrgency {
  STANDARD
  URGENT
  EMERGENCY
}

enum RegistrationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  MORE_INFO_NEEDED
}
