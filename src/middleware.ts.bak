import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { getToken } from 'next-auth/jwt';

// CORS headers for API responses
const corsHeaders = {
  'Access-Control-Allow-Origin': process.env.NEXTAUTH_URL || 'http://localhost:3000',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, Accept, Origin',
  'Access-Control-Allow-Credentials': 'true',
  'Access-Control-Max-Age': '86400',
};

// Public routes that don't require authentication
const PUBLIC_ROUTES = [
  '/',
  '/login',
  '/api/auth',
  '/_next',
  '/favicon.ico',
  '/_vercel',
  '/public',
  '/images',
  '/error',
  '/unauthorized'
];

// Routes that require authentication but are not admin-specific
const AUTH_ROUTES = [
  '/dashboard',
  '/account',
  '/api/user',
];

// Admin-only routes
const ADMIN_ROUTES = [
  '/admin',
  '/api/admin',
  '/users',
  '/api/users'
];

// Routes that should be accessible even when logged in
const GUEST_ONLY_ROUTES = [
  '/login',
  '/register',
  '/forgot-password',
];

// API routes that don't require authentication
const PUBLIC_API_ROUTES = [
  '/api/auth/[...nextauth]',
  '/api/auth/session',
  '/api/auth/csrf',
  '/api/auth/providers',
  '/api/auth/signin',
  '/api/auth/signout',
  '/api/auth/error',
  '/api/auth/verify-request',
  '/api/auth/_log',
  '/api/auth/forgot-password',
  '/api/auth/reset-password',
  '/api/auth/verify-email',
  '/api/health'
];

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  const isApiRoute = pathname.startsWith('/api');
  
  // Handle CORS preflight requests
  if (request.method === 'OPTIONS') {
    return new NextResponse(null, {
      status: 204,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json',
      },
    });
  }

  const response = NextResponse.next();

  // Add CORS headers to all responses
  Object.entries(corsHeaders).forEach(([key, value]) => {
    response.headers.set(key, value);
  });

  // Add security headers to all responses
  response.headers.set('X-Content-Type-Options', 'nosniff');
  response.headers.set('X-Frame-Options', 'DENY');
  response.headers.set('X-XSS-Protection', '1; mode=block');
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');
  response.headers.set('Cache-Control', 'no-store, max-age=0');

  try {
    // Check if the current route is public
    const isPublicRoute = PUBLIC_ROUTES.some(route => 
      pathname === route || pathname.startsWith(`${route}/`)
    );

    // Check if the current route is a public API route
    const isPublicApiRoute = isApiRoute && PUBLIC_API_ROUTES.some(route => 
      pathname.startsWith(route)
    );

    // If it's a public route or public API route, allow access
    if (isPublicRoute || isPublicApiRoute) {
      return response;
    }

    // Get the session token
    const token = await getToken({ req: request });

    // If not authenticated, handle based on route type
    if (!token) {
      if (isApiRoute) {
        return new NextResponse(
          JSON.stringify({ 
            success: false, 
            error: 'Authentication required',
            code: 'UNAUTHORIZED'
          }), 
          { 
            status: 401, 
            headers: { 
              'Content-Type': 'application/json',
              ...corsHeaders
            } 
          }
        );
      }
      
      // For non-API routes, redirect to login with callback URL
      const loginUrl = new URL('/login', request.url);
      loginUrl.searchParams.set('callbackUrl', pathname);
      return NextResponse.redirect(loginUrl);
    }

    // Check if user is trying to access guest-only routes while logged in
    const isGuestOnlyRoute = GUEST_ONLY_ROUTES.some(route => 
      pathname === route || pathname.startsWith(`${route}/`)
    );
    
    if (isGuestOnlyRoute) {
      return NextResponse.redirect(new URL('/dashboard', request.url));
    }

    // Check admin routes
    const isAdminRoute = ADMIN_ROUTES.some(route => 
      pathname === route || pathname.startsWith(`${route}/`)
    );
    
    const isAdmin = token.role === 'ADMIN' || token.role === 'SUPER_ADMIN';
    
    if (isAdminRoute && !isAdmin) {
      if (isApiRoute) {
        return new NextResponse(
          JSON.stringify({ 
            success: false,
            error: 'Insufficient permissions',
            code: 'FORBIDDEN'
          }), 
          { 
            status: 403, 
            headers: { 
              'Content-Type': 'application/json',
              ...corsHeaders
            } 
          }
        );
      }
      return NextResponse.redirect(new URL('/unauthorized', request.url));
    }

    return response;
  } catch (error) {
    console.error('Middleware error:', error);
    
    if (isApiRoute) {
      return new NextResponse(
        JSON.stringify({ 
          success: false,
          error: 'Internal server error',
          code: 'INTERNAL_SERVER_ERROR'
        }), 
        { 
          status: 500, 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders
          } 
  }

  // Skip middleware for public paths and API routes
  if (isPublicPath && !isGuestOnlyPath) {
    return addSecurityHeaders(NextResponse.next());
  }

  // Skip middleware for public API routes
  if (isApiRoute && isPublicApiRoute) {
    return addSecurityHeaders(NextResponse.next());
  }

  // Get the token from the request
  const token = await getToken({ req: request });
  const isAuthenticated = !!token;
  const isAdmin = token?.role === 'ADMIN';

  // Handle guest-only paths (login, signup, etc.)
  if (isGuestOnlyPath) {
    if (isAuthenticated) {
      // Redirect to dashboard if user is already authenticated
      const url = new URL('/dashboard', request.url);
      return NextResponse.redirect(url);
    }
    return addSecurityHeaders(NextResponse.next());
  }

  // Handle API routes
  if (isApiRoute) {
    if (!isAuthenticated) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401, headers: getCorsHeaders() }
      );
    }

    // Check admin access for admin API routes
    if (isAdminPath && !isAdmin) {
      return NextResponse.json(
        { error: 'Forbidden' },
        { status: 403, headers: getCorsHeaders() }
      );
    }

    return addSecurityHeaders(NextResponse.next());
  }

  // Handle regular page routes
  if (!isAuthenticated) {
    // Redirect to signin page if not authenticated
    const signInUrl = new URL('/auth/signin', request.url);
    signInUrl.searchParams.set('callbackUrl', pathname);
    return NextResponse.redirect(signInUrl);
  }

  // Check admin access for admin pages
  if (isAdminPath && !isAdmin) {
    // Redirect to unauthorized page or home
    const url = new URL('/unauthorized', request.url);
    return NextResponse.rewrite(url);
  }

  // Add security headers to all responses
  return addSecurityHeaders(NextResponse.next());
}

// Add CORS headers to a response
function addCorsHeaders(response: NextResponse) {
  const headers = getCorsHeaders();
  Object.entries(headers).forEach(([key, value]) => {
    response.headers.set(key, value);
  });
  return response;
}

// Get CORS headers
function getCorsHeaders() {
  return {
    'Access-Control-Allow-Origin': process.env.NEXTAUTH_URL || 'http://localhost:3000',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Access-Control-Allow-Credentials': 'true',
  };
}

// Add security headers to a response
function addSecurityHeaders(response: NextResponse) {
  const securityHeaders = {
    'X-Content-Type-Options': 'nosniff',
    'X-Frame-Options': 'DENY',
    'X-XSS-Protection': '1; mode=block',
    'Referrer-Policy': 'strict-origin-when-cross-origin',
    'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',
  };

  Object.entries(securityHeaders).forEach(([key, value]) => {
    response.headers.set(key, value);
  });

  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\.(?:svg|png|jpg|jpeg|gif|webp|ico|css|js|woff|woff2|ttf|eot)$).*)',
  ],
};
