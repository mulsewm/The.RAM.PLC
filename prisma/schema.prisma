// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // If DATABASE_URL is not set, construct it from individual env vars
  // Example format: postgresql://postgres:postgres@localhost:5432/theRAMDB
}

// User model for admin dashboard users
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  notes         Note[]
  statusChanges StatusHistory[]
  attachments   Attachment[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

// Partnership application model
model PartnershipApplication {
  id           String   @id @default(cuid())
  fullName     String
  email        String
  company      String
  phone        String
  country      String
  expertise    String[] // Stored as an array of strings
  businessType String
  message      String?  @db.Text
  status       Status   @default(NEW)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  statusHistory StatusHistory[]
  notes         Note[]
  attachments   Attachment[]

  @@map("partnership_applications")
}

enum Status {
  NEW
  UNDER_REVIEW
  APPROVED
  REJECTED
  ONBOARDING
}

// Status history for tracking status changes
model StatusHistory {
  id             String                @id @default(cuid())
  application    PartnershipApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId  String
  previousStatus Status?
  newStatus      Status
  notes          String?               @db.Text
  changedBy      User                  @relation(fields: [userId], references: [id])
  userId         String
  changedAt      DateTime              @default(now())

  @@map("status_history")
}

// Notes for partnership applications
model Note {
  id            String                @id @default(cuid())
  application   PartnershipApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  content       String                @db.Text
  createdBy     User                  @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

  @@map("notes")
}

// Attachments for partnership applications
model Attachment {
  id            String                @id @default(cuid())
  application   PartnershipApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  fileName      String
  fileType      String
  fileSize      Int
  description   String?
  filePath      String
  uploadedBy    User                  @relation(fields: [userId], references: [id])
  userId        String
  uploadedAt    DateTime              @default(now())

  @@map("attachments")
}
